// T.C. = O(V + E)      S.C. = 0(V)
#include<stdio.h>
#include<stdlib.h>
 
struct Queue{
    int size, front, rear;
    int* arr;
};
 //returns 1 if q is empty and 0 if not empty
int isEmpty(struct Queue *q){
    if(q->front >= q->rear)
        return 1;
    else
        return 0;
}
//returns 1 if q is full and 0 if not full
int isFull(struct Queue *q){
    if(q->rear == q->size-1)
        return 1;
    else
        return 0;
}
//adds an element from the rear part of the q
void enqueue(struct Queue *q, int val){
    if(isFull(q))
        printf("This Queue is full\n");
    else{
        q->rear++;
        q->arr[q->rear] = val;
    }
}
//removes and returns an element from the front part of q
int dequeue(struct Queue *q){
    int element = -1;
    if(isEmpty(q))
        printf("This Queue is empty\n");
    else{
        q->front++;
        element = q->arr[q->front]; 
    }
    return element;
}

int main(){
    int graph[7][7] = {
        {0,1,1,1,0,0,0},
        {1,0,0,0,0,0,0},
        {1,0,0,0,0,1,1},
        {1,0,0,0,0,0,1},
        {0,0,0,0,0,0,1},
        {0,0,1,0,0,0,0}, 
        {0,0,1,1,1,0,0} };
    //array to store visited status of each node
    int visited[7] = {0,0,0,0,0,0,0};
    //initially all the nodes are not visited
    for(int i=0; i<7; i++)
        visited[i] = 0;
    //array implementation of queue (FIFO)
    struct Queue q;
    q.size = 100;
    q.front = q.rear = -1;
    q.arr = (int*)malloc(q.size * sizeof(int));
    
    printf("The BFS of the graph is...\n");
    // BFS Implementation
    int startingNode = 0;
    enqueue(&q, startingNode);
    visited[startingNode] = 1;
    printf("%d ", startingNode);
    
    while (!isEmpty(&q))
    {
        int node = dequeue(&q);
        //to get all the neighbours of node
        for (int nbr=0; nbr<7; nbr++)
        {
            if(graph[node][nbr] == 1 && visited[nbr] == 0){
                printf("%d ", nbr);
                enqueue(&q, nbr);
                visited[nbr] = 1;
            }
        }
    }
    return 0;
}

// The BFS of the graph is...
// 0 1 2 3 5 6 4 
