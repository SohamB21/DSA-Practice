//First and last position of an element in sorted array.

//T.C. = O(log n)        S.C. = O(1)
#include<iostream>
using namespace std;
int firstOcc(int arr[], int n, int element){
	int low=0, high=n-1, ans=-1;
	
	while(low <= high){
		int mid = low + (high-low)/2;
		
		if(arr[mid] == element){
			ans = mid;
			high = mid-1;
		}
		else if(arr[mid] < element)
			low = mid+1;
		else
			high = mid-1;
	}
	return ans;
}
int lastOcc(int arr[], int n, int element){
	int low=0, high=n-1, ans=-1;

	while(low <= high){
		int mid = low + (high-low)/2;
		
		if(arr[mid] == element){
			ans = mid;
			low = mid+1;
		}
	    else if(arr[mid] < element)
			low = mid+1;
		else
			high = mid-1;
	}
	return ans;
}
int main(){
	int arr[7] = {0,1,1,1,2,2,2};
	int n = sizeof(arr)/sizeof(int);
	int element = 2;
	int first = firstOcc(arr, 7, element);
	int last = lastOcc(arr, 7, element);
	cout<<"First and last occurance of element "<<element<<" is: ";
	cout<<first<<" and "<<last<<" index respectively"<<endl;
}

/*
T.C. = O(n)     S.C. = O(1)

#include<iostream>
using namespace std;
int occurence(int arr[], int n, int element){
    int low = 0, high = n-1;
    int firstFlag = -1, lastFlag = -1;
    
	while(low <= high){
	    if(firstFlag==-1 && arr[low]==element){
	        firstFlag = low;
	        cout<<"First found at "<<firstFlag<<endl;
	    }
	    if(firstFlag==-1)
	        low++;
	        
        if(lastFlag==-1 && arr[high]==element){
	        lastFlag = high;
	        cout<<"Last found at "<<lastFlag<<endl;
        }
	    if(lastFlag==-1)
	        high--;
	        
        if(firstFlag!=-1 && lastFlag!=-1)
            break;
	}
	if(firstFlag==-1 && lastFlag==-1){
	    cout<<"Wrong Input"<<endl;
	}
}
int main(){
	int arr[7] = {0,1,1,1,2,2,2};
	int n = sizeof(arr)/sizeof(int);
	int element = 2;
	occurence(arr, n, element);
}
*/
