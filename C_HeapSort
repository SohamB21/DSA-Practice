// T.C. = O(n*logn)     S.C. = O(1)
#include <stdio.h>

void swap(int* a, int* b){
    int temp = *a;
    *a = *b;
    *b = temp;
}
void heapify(int arr[], int n, int i){
    int largest = i;
    int left = 2*i + 1;
    int right = 2*i + 2;
    
    //if left child is larger
    if(left < n && arr[left] > arr[largest])
        largest = left;
    //if right child is larger
    if(right < n && arr[right] > arr[largest])
        largest = right;
    //if given root is not the largest
    if(largest != i){
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}
void heapSort(int arr[], int n){
   //building max heap
   for(int i=n/2 - 1; i>=0; i--){
       heapify(arr, n, i);
   }
   //heap sort
   for(int i=n - 1; i>=0; i--){
       swap(&arr[0], &arr[i]);
       heapify(arr, i, 0);
   }
}
int main() {
    int arr[] = {90, 80, 20, 70, 30, 60, 40, 50};
    int i, n = sizeof(arr)/sizeof(arr[0]);
    //printing initial array
    printf("Initial array...\n");
    for(i=0; i<n; i++)
        printf("%d, ", arr[i]);
    
    heapSort(arr, n);
    
    //printing sorted array
    printf("\nSorted array...\n");
    for(i=0; i<n; i++)
        printf("%d, ", arr[i]);
    return 0;
}
