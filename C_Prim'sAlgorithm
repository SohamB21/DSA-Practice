// T.C. = O(v*v)       S.C. = O(v)
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

//to initialize parent, mst and key array
void initialize(bool mst[], int key[], int v){
    for(int i=0; i<v; i++){
        mst[i] = false;
        key[i] = INT_MAX;
    }
}
//to find the minimum key value weight in each cut
int minFind(bool mst[], int key[], int v){
    int minIndex, minVal = INT_MAX;
    for(int i=0; i<v; i++){
        if(mst[i] == false && key[i] < minVal){
            minVal = key[i];
            minIndex = i;
        }
    }
    return minIndex;
}
//to find Minimum Spanning Tree
void primAlgo(int v, int graph[v][v]){
    //to track parents of each node
    int parent[v];
    //to track whether the nodes are added in MST or not
    bool mst[v];
    //to get minimum weighted edge in each cut
    int key[v];
    
    initialize(mst, key, v);
    parent[0] = -1;
    key[0] = 0;
    int minWt = 0;
    
    for(int i=0; i<v; i++){
        //to pick the min key vertex in each cut
        int u = minFind(mst, key, v);
        //to include the picked vertex in MST
        mst[u] = true;
        //to store total minWt of MST
        minWt = minWt + key[u];
        
        //update key value of neighbours of u
        for(int nbr=0; nbr<v; nbr++){
            //non-zero adjacent nodes in adj matrix = nbr
            //nbr must not be already included in MST
            //nbr's key value must be < its mst key value
            if(graph[u][nbr] != 0 && mst[nbr] == false && 
                graph[u][nbr] < key[nbr]){
                    parent[nbr] = u;
                    key[nbr] = graph[u][nbr];
            }
        }
    }
    //print MST
    printf("Following are the edges of the MST...\n");
    printf("u --- v => w\n");
    for(int i=1; i<v; i++){
        int u = parent[i];
        int v = i;
        int w = graph[u][v];
        printf("%d --- %d => %d\n", u, v, w);
    }
    printf("Total cost of the MST = %d", minWt);
}
int main(){
    int graph[5][5] = { { 0, 1, 5, 0, 0 },
                        { 1, 0, 0, 6, 2 },
                        { 5, 0, 0, 4, 7 },
                        { 0, 6, 4, 0, 1 },
                        { 0, 2, 7, 1, 0 } };
    int v = 5;
    primAlgo(v, graph);
    
    return 0;
}

// Following are the edges of the MST...
// u --- v => w
// 0 --- 1 => 1
// 3 --- 2 => 4
// 4 --- 3 => 1
// 1 --- 4 => 2
// Total cost of the MST = 8
